Detalhes Activity - Arquivo

ArrayAdapter adapter1 = loadelements.setSpinner(this, Integer.valueOf(R.array.number_parking_spaces));
ArrayAdapter adapter2 = loadelements.setSpinner(this, Integer.valueOf(R.array.standard_finish));
ArrayAdapter adapter3 = loadelements.setSpinner(this, Integer.valueOf(R.array.quality_level));

//ADAPTADOR SPINNER VAGAS

//ADAPTADOR SPINNER PADRÃO ACABAMENTO
ArrayAdapter <CharSequence> adapter2 = ArrayAdapter.createFromResource(this,R.array.standard_finish,
android.R.layout.simple_spinner_item);
adapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
//ADAPTADOR SPINNER ESTADO DE CONSERVAÇÃO
ArrayAdapter <CharSequence> adapter3 = ArrayAdapter.createFromResource(this,R.array.quality_level,
android.R.layout.simple_spinner_item);
adapter3.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

vagaGaragemMotivo = ((Spinner) findViewById(R.id.space_parking_input));
//this.vagaGaragemMotivo.setAdapter(getAdapter1());
ArrayAdapter<CharSequence> adapter1 = ArrayAdapter.createFromResource(this,R.array.number_parking_spaces,
android.R.layout.simple_spinner_item);
adapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
vagaGaragemMotivo.setAdapter(adapter1);


//MOTIVO - ANTIGO
this.mViewHolder.areaMotivo = findViewById(R.id.reason_area_input);
this.mViewHolder.vagaGaragemMotivo = findViewById(R.id.space_parking_input);
this.mViewHolder.vagaGaragemMotivo.setAdapter(adapter1);
this.mViewHolder.padraoAcabamentoMotivo = findViewById(R.id.finishing_pattern_input);
this.mViewHolder.padraoAcabamentoMotivo.setAdapter(adapter2);
this.mViewHolder.estadoConservacaoMotivo = findViewById(R.id.conservation_state_input);
this.mViewHolder.estadoConservacaoMotivo.setAdapter(adapter3);

//AMOSTRA 1
this.mViewHolder.valorAmostra1 = findViewById(R.id.sample1_value_input);
this.mViewHolder.areaAmostra1 = findViewById(R.id.sample1_area_input);
this.mViewHolder.vagaGaragemAmostra1 = findViewById(R.id.sample1_Parking_space_input);
this.mViewHolder.vagaGaragemAmostra1.setAdapter(adapter1);
this.mViewHolder.padraoAcabamentoAmostra1 = findViewById(R.id.sample1_finishing_pattern_input);
this.mViewHolder.padraoAcabamentoAmostra1.setAdapter(adapter2);
this.mViewHolder.estadoConservacaoAmostra1 = findViewById(R.id.sample1_conservation_state_input);
this.mViewHolder.estadoConservacaoAmostra1.setAdapter(adapter3);
//AMOSTRA 2
this.mViewHolder.valorAmostra2 = findViewById(R.id.sample2_value_input);
this.mViewHolder.areaAmostra2 = findViewById(R.id.sample2_area_input);
this.mViewHolder.vagaGaragemAmostra2 = findViewById(R.id.sample2_parking_space_input);
this.mViewHolder.vagaGaragemAmostra2.setAdapter(adapter1);
this.mViewHolder.padraoAcabamentoAmostra2 = findViewById(R.id.sample2_finishing_pattern_input);
this.mViewHolder.padraoAcabamentoAmostra2.setAdapter(adapter2);
this.mViewHolder.estadoConservacaoAmostra2 = findViewById(R.id.sample2_conservation_state_input);
this.mViewHolder.estadoConservacaoAmostra2.setAdapter(adapter3);
//AMOSTRA 3
this.mViewHolder.valorAmostra3 = findViewById(R.id.sample3_value_input);
this.mViewHolder.areaAmostra3 = findViewById(R.id.sample3_area_input);
this.mViewHolder.vagaGaragemAmostra3 = findViewById(R.id.sample3_parking_space_input);
this.mViewHolder.vagaGaragemAmostra3.setAdapter(adapter1);
this.mViewHolder.padraoAcabamentoAmostra3 = findViewById(R.id.sample3_finishing_pattern_input);
this.mViewHolder.padraoAcabamentoAmostra3.setAdapter(adapter2);
this.mViewHolder.estadoConservacaoAmostra3 = findViewById(R.id.sample3_conservation_state_input);
this.mViewHolder.estadoConservacaoAmostra3.setAdapter(adapter3);

this.mViewHolder.calculateButton = findViewById(R.id.calculate_result);

this.mViewHolder.calculateButton.setOnClickListener(this);


Double vhAmostra1 =
        ((vnhAmostra1 / fAAmostra1) * 0.9) * (1 + ((fPaMotivo / fPaAmostra1) - 1) +
                ((fEcMotivo / fEcAmostra1) - 1) + ((fVgMotivo / fVgAmostra1) - 1) + (fatorArea(fAAmostra1 / fAMotivo) - 1));
Double vhAmostra2 =
        ((vnhAmostra2 / fAAmostra2) * 0.9) * (1 + ((fPaMotivo / fPaAmostra2) - 1) +
                ((fEcMotivo / fEcAmostra2) - 1) + ((fVgMotivo / fVgAmostra2) - 1) + (fatorArea(fAAmostra2 / fAMotivo) - 1));
Double vhAmostra3 =
        ((vnhAmostra3 / fAAmostra3) * 0.9) * (1 + ((fPaMotivo / fPaAmostra3) - 1) +
                ((fEcMotivo / fEcAmostra3) - 1) + ((fVgMotivo / fVgAmostra3) - 1) + (fatorArea(fAAmostra3 / fAMotivo) - 1));


CÁLCULOS DE DISPERSÃO
Double mA = ;

if(vhAmostra1 >= (limit + mA) || vhAmostra1 <= (mA - limit)){
    new AlertDialog.Builder(this)
            .setTitle(R.string.outlier_title)
            .setMessage(R.string.outlier_sample1)
            .setPositiveButton(R.string.outlier_yes, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    findViewById(R.id.sample1_value_input).requestFocus();
                    dialog.dismiss();
                }
            })
        .setNegativeButton(R.string.outlier_no, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                }
    })
            .show();
   return;
}
if(vhAmostra2 >= (limit + mA) || vhAmostra2 <= (mA - limit)) {
    new AlertDialog.Builder(this)
            .setTitle(R.string.outlier_title)
            .setMessage(R.string.outlier_sample2)
            .setPositiveButton(R.string.outlier_yes, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    findViewById(R.id.sample2_value_input).requestFocus();
                    dialog.dismiss();
                }
            })
            .setNegativeButton(R.string.outlier_no, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                }
            })
            .show();
}
if(vhAmostra3 >= (limit + mA) || vhAmostra3 <= (mA - limit)) {
    new AlertDialog.Builder(this)
            .setTitle(R.string.outlier_title)
            .setMessage(R.string.outlier_sample3)
            .setPositiveButton(R.string.outlier_yes, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    findViewById(R.id.sample3_value_input).requestFocus();
                    dialog.dismiss();
                }
            })
            .setNegativeButton(R.string.outlier_no, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                }
            })
            .show();
    return;
//DESVIO PADRÃO
double position1 = Math.pow(vhAmostra1 - mA, 2);
double position2 = Math.pow(vhAmostra2 - mA, 2);
double position3 = Math.pow(vhAmostra3 - mA, 2);
double dP = Math.sqrt((position1 + position2 + position3) / 2);
}



//LIMITES
Double limiteSup = mA*1.3;
Double limiteInf = mA*0.7;

//INTERVALO DE CONFIABILIDADE 3 AMOSTRAS (1.886 t-Student)
Double iC = (1.886) * (desvioPadrão/ (Math.pow(2, 0.5)));
double iCSup = ((mA + iC) / mA) - 1;
if (iCSup >= 0.15) {
    iCSup = 1.15;
} else {
    iCSup = iCSup + 1;
}

private Double fatorArea(Double valor) {
        if (valor <= 0.7 || valor >= 1.3) {
            return Math.pow(valor, 0.125);
        } else {
            return Math.pow(valor, 0.25);
        }
    }

private int levelConverter(String valor) {
        /* necessário resolver problema com strings carregadas nos sppiners, ao serem atualizadas, devem atualizar os valores
         *desse método.*/
        if (valor.equals("Ótimo") || valor.equals("Alto")) {
            return 5;
        }
        if (valor.equals("Bom") || valor.equals("Superior")) {
            return 4;
        }
        if (valor.equals("Razoável") || valor.equals("Normal")) {
            return 3;
        }
        if (valor.equals("Ruim") || valor.equals("Simples")) {
            return 2;
        }
        if (valor.equals("Demolição") || valor.equals("Econômico")) {
            return 1;
        }
        return 0;
    }